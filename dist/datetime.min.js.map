{"version":3,"file":"datetime.min.js","sources":["../src/cfns.js","../src/datetime.js"],"sourcesContent":["\r\n// 是 HTMLElement 节点\r\nexport function isElement(tar) {\r\n  return tar instanceof HTMLElement\r\n}\r\n\r\nexport function isNode(tar) {\r\n  return tar instanceof Node\r\n}\r\n\r\n// 获取指定目标的数据类型\r\nexport function type(tar) {\r\n  return Object.prototype.toString.call(tar).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()\r\n}\r\n\r\n// 兼容出来 String.prototype.padStart\r\nexport function padStart(tar, length, padString = '') {\r\n  tar = `${tar}`\r\n  if (''.padStart) {\r\n    return tar.padStart(length, padString)\r\n  }\r\n  return tar.length > length ? tar : `${Array(length).join(padString)}${tar}`.slice(-length)\r\n} ","import { type, padStart } from './cfns.js'\r\n\r\n\r\n// 将毫秒转 Date 对象\r\nfunction millisecondsToDate(milliseconds, isTimestamp) {\r\n  if (isTimestamp && `${milliseconds}`.split('.')[0].length < 11) {\r\n    milliseconds = Math.round(milliseconds * 1000)\r\n  }\r\n  return new Date(milliseconds)\r\n}\r\n\r\n\r\n/**\r\n * @param {Date|Timestamp|Milliseconds} target - 需要被格式化的时间对象/时间戳/毫秒\r\n * @param {String|Array|Object|Boolean} response - template（时间格式化模板） 或 [template, ...] 或 { name: template, ... } 或 true/false。当为 true/false 时，返回 template 占位符为键名的对象。\r\n *  template 占位符\r\n *    $Y：两位年。例如：18、19、20\r\n * \t  $y：四位年。例如：2020\r\n *    $M：1 ~ 12 月 的英文缩写\r\n *    $m：1 ~ 12 月\r\n *    $w：星期一 到 星期日 的英文缩写\r\n *    $d：1 ~ 31 天\r\n *    $H：24 小时\r\n *    $h：12 小时\r\n *    $i：60 分钟\r\n *    $s：60 秒\r\n *    $u：0 ~ 999 毫秒\r\n * @param {Boolean} isTimestamp - 需要被格式化的对象是否为时间戳。设置 true 时，如果 target 字符长度小于等于 10，target 将被乘以 1000\r\n */\r\nexport function format(target, response, isTimestamp = false) {\r\n  let date\r\n  switch(type(target)) {\r\n    case 'date':\r\n      date = target\r\n      break\r\n    case 'string':\r\n      target = parseInt(target)\r\n      isNaN(target) && format.targetError()\r\n      date = millisecondsToDate(target, isTimestamp)\r\n      break\r\n    case 'number':\r\n      date = millisecondsToDate(target, isTimestamp)\r\n      break\r\n    default:\r\n      format.targetError()\r\n  }\r\n  let [ w, M, d, y, His ] = date.toString().split(' ')\r\n  let [ H, i, s ] = His.split(':')\r\n  let Y = y.slice(2)\r\n  let m = padStart(date.getMonth() + 1, 2, 0)\r\n  let u = padStart(date.getMilliseconds(), 3, 0)\r\n  let h = padStart(H > 12 ? H - 12 : H, 2, 0)\r\n  i = padStart(i, 2, 0)\r\n  s = padStart(s, 2, 0)\r\n  \r\n  let baseData = { $y: y, $Y: Y, $m: m, $M: M, $d: d, $h: h, $H: H, $i: i, $s: s, $u: u, $w: w }\r\n    \r\n  switch(type(response)) {\r\n    // 模板字符串\r\n    case 'string':\r\n      return format.replaceTemplate(baseData, response)\r\n    // 由模板字符串组成的数组\r\n    case 'array':\r\n      return response.map(template => format.replaceTemplate(baseData, template))\r\n    // 由模板字符串组成的对象\r\n    case 'object': {\r\n      let temp = {}\r\n      for(let [k, v] of Object.entries(response)) {\r\n        temp[k] = format.replaceTemplate(baseData, v)\r\n      }\r\n      return temp\r\n    }\r\n    // 直接返回切割后的数据\r\n    case 'boolean':\r\n      return baseData\r\n    // 无效的类型\r\n    default:\r\n      format.templateError()\r\n  }\r\n}\r\n\r\n// 模板替换\r\nformat.replaceTemplate = function (baseData, template) {\r\n  if (type(template) != 'string') {\r\n    format.templateError()\r\n  }\r\n  return template\r\n    .replace(/\\$y/g, baseData.$y)\r\n    .replace(/\\$Y/g, baseData.$Y)\r\n    .replace(/\\$m/g, baseData.$m)\r\n    .replace(/\\$d/g, baseData.$d)\r\n    .replace(/\\$h/g, baseData.$h)\r\n    .replace(/\\$H/g, baseData.$H)\r\n    .replace(/\\$i/g, baseData.$i)\r\n    .replace(/\\$s/g, baseData.$s)\r\n    .replace(/\\$u/g, baseData.$u)\r\n    .replace(/\\$w/g, baseData.$w)\r\n    .replace(/\\$M/g, baseData.$M)\r\n}\r\n\r\n// 时间格式化模板错误处理\r\nformat.templateError = function () {\r\n  throw new TypeError('无效的时间格式化模板')\r\n}\r\n\r\n// 被格式化的时间的错误处理\r\nformat.targetError = function () {\r\n  throw new TypeError('无效的target')\r\n}"],"names":["type","tar","Object","prototype","toString","call","match","toLowerCase","padStart","length","padString","Array","join","slice","millisecondsToDate","milliseconds","isTimestamp","split","Math","round","Date","format","target","response","date","parseInt","isNaN","targetError","w","M","d","y","His","H","i","s","Y","m","getMonth","u","getMilliseconds","h","baseData","$y","$Y","$m","$M","$d","$h","$H","$i","$s","$u","$w","replaceTemplate","map","template","temp","k","v","entries","templateError","replace","TypeError"],"mappings":"upBAWO,SAASA,EAAKC,UACZC,OAAOC,UAAUC,SAASC,KAAKJ,GAAKK,MAAM,iBAAiB,GAAGC,cAIhE,SAASC,EAASP,EAAKQ,OAAQC,yDAAY,UAChDT,YAASA,GACL,GAAGO,SACEP,EAAIO,SAASC,EAAQC,GAEvBT,EAAIQ,OAASA,EAASR,EAAM,UAAGU,MAAMF,GAAQG,KAAKF,WAAaT,GAAMY,OAAOJ,GCjBrF,SAASK,EAAmBC,EAAcC,UACpCA,GAAe,UAAGD,GAAeE,MAAM,KAAK,GAAGR,OAAS,KAC1DM,EAAeG,KAAKC,MAAqB,IAAfJ,IAErB,IAAIK,KAAKL,GAqBX,SAASM,EAAOC,EAAQC,OACzBC,EADmCR,iEAEhChB,EAAKsB,QACL,OACHE,EAAOF,YAEJ,SACHA,EAASG,SAASH,GAClBI,MAAMJ,IAAWD,EAAOM,cACxBH,EAAOV,EAAmBQ,EAAQN,aAE/B,SACHQ,EAAOV,EAAmBQ,EAAQN,iBAGlCK,EAAOM,kBAELC,EAAGC,EAAGC,EAAGC,EAAGC,GAAQR,EAAKpB,WAAWa,MAAM,MAC1CgB,EAAGC,EAAGC,GAAMH,EAAIf,MAAM,KACxBmB,EAAIL,EAAElB,MAAM,GACZwB,EAAI7B,EAASgB,EAAKc,WAAa,EAAG,EAAG,GACrCC,EAAI/B,EAASgB,EAAKgB,kBAAmB,EAAG,GACxCC,EAAIjC,EAASyB,EAAI,GAAKA,EAAI,GAAKA,EAAG,EAAG,GACzCC,EAAI1B,EAAS0B,EAAG,EAAG,GACnBC,EAAI3B,EAAS2B,EAAG,EAAG,OAEfO,EAAW,CAAEC,GAAIZ,EAAGa,GAAIR,EAAGS,GAAIR,EAAGS,GAAIjB,EAAGkB,GAAIjB,EAAGkB,GAAIP,EAAGQ,GAAIhB,EAAGiB,GAAIhB,EAAGiB,GAAIhB,EAAGiB,GAAIb,EAAGc,GAAIzB,UAEpF5B,EAAKuB,QAEL,gBACIF,EAAOiC,gBAAgBZ,EAAUnB,OAErC,eACIA,EAASgC,IAAIC,GAAYnC,EAAOiC,gBAAgBZ,EAAUc,QAE9D,cACCC,EAAO,OACP,IAAKC,EAAGC,KAAMzD,OAAO0D,QAAQrC,GAC/BkC,EAAKC,GAAKrC,EAAOiC,gBAAgBZ,EAAUiB,UAEtCF,MAGJ,iBACIf,UAGPrB,EAAOwC,iBAKbxC,EAAOiC,gBAAkB,SAAUZ,EAAUc,SACrB,UAAlBxD,EAAKwD,IACPnC,EAAOwC,gBAEFL,EACJM,QAAQ,OAAQpB,EAASC,IACzBmB,QAAQ,OAAQpB,EAASE,IACzBkB,QAAQ,OAAQpB,EAASG,IACzBiB,QAAQ,OAAQpB,EAASK,IACzBe,QAAQ,OAAQpB,EAASM,IACzBc,QAAQ,OAAQpB,EAASO,IACzBa,QAAQ,OAAQpB,EAASQ,IACzBY,QAAQ,OAAQpB,EAASS,IACzBW,QAAQ,OAAQpB,EAASU,IACzBU,QAAQ,OAAQpB,EAASW,IACzBS,QAAQ,OAAQpB,EAASI,KAI9BzB,EAAOwC,cAAgB,iBACf,IAAIE,UAAU,eAItB1C,EAAOM,YAAc,iBACb,IAAIoC,UAAU"}