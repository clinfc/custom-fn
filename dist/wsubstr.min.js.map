{"version":3,"file":"wsubstr.min.js","sources":["../src/wsubstr.js"],"sourcesContent":["/**\r\n * 指定宽度（PX），样式切割字符串 \r\n */\r\n\r\n// 创建字符计算容器\r\nfunction createNode(str, css) {\r\n  let span = document.createElement('span')\r\n  let options = {\r\n    opacity: 0,\r\n    zIndex: -100,\r\n    width: 0,\r\n    display: 'inline-block',\r\n    whiteSpace: 'nowrap',\r\n  }\r\n  if (typeof css === 'object') {\r\n    Object.assign(options, css)\r\n  }\r\n  for (let [k, v] of Object.entries(options)) {\r\n    span.style[k] = v\r\n  }\r\n  let text = document.createTextNode(str)\r\n  span.appendChild(text)\r\n  document.body.appendChild(span)\r\n  \r\n  return {\r\n    span,\r\n    text\r\n  }\r\n}\r\n\r\n// 获取基础数据\r\nfunction basicData(span, str, maxWidth) {\r\n  let width = span.scrollWidth    // 字符串的总宽\r\n  let average = width / str.length // 单个字符的平均宽度\r\n  let size = Math.ceil(maxWidth / average) - 1  // maxWidth 宽度的字符串大概有多少个字符，由于平均字符宽度肯定比实际宽度小，所以最少需要减一\r\n  \r\n  return { width, average, size }\r\n}\r\n\r\n// 比较两个浮点数是否相等\r\nfunction equal(f1, f2) {\r\n  return Math.abs(f1 - f2) < Number.EPSILON\r\n}\r\n\r\n\r\n// 计算当前字符串的宽度是否达标\r\nfunction computed(span, text, childStr, maxWidth, average) {\r\n  text.textContent = childStr\r\n  let w = span.scrollWidth\r\n  if (w < maxWidth || equal(w, maxWidth)) { // 字符穿宽度 <= maxWidth\r\n    let d = maxWidth - w\r\n    if (d < average) {  // 当前字符串宽度与最大宽度误差在一个平均字符宽度以内\r\n      return {\r\n        done: true,\r\n        diff: 0\r\n      }\r\n    } else {  // 当前字符串宽度与最大宽度误差超过一个字符\r\n      return {\r\n        done: false,\r\n        diff: -Math.floor(d / average)  // 少了多少个字符\r\n      }\r\n    }\r\n  } else { // 字符穿宽度 > maxWidth\r\n    return {\r\n      done: false,\r\n      diff: Math.ceil((w - maxWidth) / average) // 多了多少个字符\r\n    }\r\n  }\r\n}\r\n\r\n// 切割字符串\r\nfunction split(span, text, str, start, end, maxWidth, average) {\r\n  let childStr = str.slice(start, end)\r\n  let { done, diff } = computed(span, text, childStr, maxWidth, average)\r\n  if (done) {\r\n    return childStr\r\n  } else {\r\n    if (diff > 0) {\r\n      childStr = str.slice(start, end - diff)\r\n      let o = computed(span, text, childStr, maxWidth, average)\r\n      if (o.done) {\r\n        return childStr\r\n      } else if (o.diff == -diff) {\r\n        --end // 字符平均值比实际值小的概率非常大，所以 diff 是否为 1，end 都要减一\r\n        diff > 1 && (end -= diff)\r\n        return str.slice(start, end)\r\n      }\r\n      return split(span, text, str, start, end - diff - o.diff, maxWidth, average)\r\n    }\r\n    return split(span, text, str, start, end - diff, maxWidth, average)\r\n  }\r\n}\r\n\r\n/**\r\n * 根据条件将字符串分割为子串，返回数组\r\n * \r\n * @param {String} str - 需要被切割的字符串\r\n * @param {Number} maxWidth - 被切割成的子串最大宽度（px）\r\n * @param {Object|undefined} css - 设置字体的样式及其它相关属性\r\n * @return {Array}\r\n */\r\nexport default function wsubstr(str, maxWidth, css = undefined) {\r\n  let temp = []   // 缓存切割后的字符串\r\n  let { span, text } = createNode(str, css) // 生成计算字符宽高的容器\r\n  let { average, size } = basicData(span, str, maxWidth) // 获取基础数据\r\n  \r\n  let start = 0, end = size  // 切割字符时的 开始/结束 索引\r\n  \r\n  while(start < str.length) {\r\n    if (str.length - start < size) { // 最后一次截取\r\n      temp.push(str.slice(start, end))\r\n      break\r\n    } else {\r\n      let childStr = split(span, text, str, start, end, maxWidth, average)\r\n      temp.push(childStr)\r\n      start += childStr.length\r\n      end = start + size\r\n    }\r\n  }\r\n  \r\n  document.body.removeChild(span)\r\n  \r\n  return temp\r\n}"],"names":["createNode","str","css","span","document","createElement","options","opacity","zIndex","width","display","whiteSpace","Object","assign","k","v","entries","style","text","createTextNode","appendChild","body","basicData","maxWidth","scrollWidth","average","length","size","Math","ceil","computed","childStr","textContent","w","f1","f2","abs","Number","EPSILON","d","done","diff","floor","split","start","end","slice","o","undefined","temp","push","removeChild"],"mappings":"qaAKA,SAASA,EAAWC,EAAKC,OACnBC,EAAOC,SAASC,cAAc,QAC9BC,EAAU,CACZC,QAAS,EACTC,QAAS,IACTC,MAAO,EACPC,QAAS,eACTC,WAAY,UAEK,iBAART,GACTU,OAAOC,OAAOP,EAASJ,OAEpB,IAAKY,EAAGC,KAAMH,OAAOI,QAAQV,GAChCH,EAAKc,MAAMH,GAAKC,MAEdG,EAAOd,SAASe,eAAelB,UACnCE,EAAKiB,YAAYF,GACjBd,SAASiB,KAAKD,YAAYjB,GAEnB,CACLA,KAAAA,EACAe,KAAAA,GAKJ,SAASI,EAAUnB,EAAMF,EAAKsB,OACxBd,EAAQN,EAAKqB,YACbC,EAAUhB,EAAQR,EAAIyB,aAGnB,CAAEjB,MAAAA,EAAOgB,QAAAA,EAASE,KAFdC,KAAKC,KAAKN,EAAWE,GAAW,GAY7C,SAASK,EAAS3B,EAAMe,EAAMa,EAAUR,EAAUE,GAChDP,EAAKc,YAAcD,MACfE,EAAI9B,EAAKqB,eACTS,EAAIV,IATKW,EASaD,EATTE,EASYZ,EARtBK,KAAKQ,IAAIF,EAAKC,GAAME,OAAOC,SAQM,KAClCC,EAAIhB,EAAWU,SACfM,EAAId,EACC,CACLe,MAAM,EACNC,KAAM,GAGD,CACLD,MAAM,EACNC,MAAOb,KAAKc,MAAMH,EAAId,UAInB,CACLe,MAAM,EACNC,KAAMb,KAAKC,MAAMI,EAAIV,GAAYE,IAzBvC,IAAeS,EAAIC,EA+BnB,SAASQ,EAAMxC,EAAMe,EAAMjB,EAAK2C,EAAOC,EAAKtB,EAAUE,OAChDM,EAAW9B,EAAI6C,MAAMF,EAAOC,IAC5BL,KAAEA,EAAFC,KAAQA,GAASX,EAAS3B,EAAMe,EAAMa,EAAUR,EAAUE,MAC1De,SACKT,KAEHU,EAAO,EAAG,CACZV,EAAW9B,EAAI6C,MAAMF,EAAOC,EAAMJ,OAC9BM,EAAIjB,EAAS3B,EAAMe,EAAMa,EAAUR,EAAUE,UAC7CsB,EAAEP,KACGT,EACEgB,EAAEN,OAASA,KAClBI,EACFJ,EAAO,IAAMI,GAAOJ,GACbxC,EAAI6C,MAAMF,EAAOC,IAEnBF,EAAMxC,EAAMe,EAAMjB,EAAK2C,EAAOC,EAAMJ,EAAOM,EAAEN,KAAMlB,EAAUE,UAE/DkB,EAAMxC,EAAMe,EAAMjB,EAAK2C,EAAOC,EAAMJ,EAAMlB,EAAUE,aAYhD,SAAiBxB,EAAKsB,OAAUrB,8DAAM8C,EAC/CC,EAAO,IACP9C,KAAEA,EAAFe,KAAQA,GAASlB,EAAWC,EAAKC,IACjCuB,QAAEA,EAAFE,KAAWA,GAASL,EAAUnB,EAAMF,EAAKsB,GAEzCqB,EAAQ,EAAGC,EAAMlB,OAEfiB,EAAQ3C,EAAIyB,QAAQ,IACpBzB,EAAIyB,OAASkB,EAAQjB,EAAM,CAC7BsB,EAAKC,KAAKjD,EAAI6C,MAAMF,EAAOC,UAEtB,KACDd,EAAWY,EAAMxC,EAAMe,EAAMjB,EAAK2C,EAAOC,EAAKtB,EAAUE,GAC5DwB,EAAKC,KAAKnB,GACVa,GAASb,EAASL,OAClBmB,EAAMD,EAAQjB,UAIlBvB,SAASiB,KAAK8B,YAAYhD,GAEnB8C"}